module nat

import bool
import pair

data nat = O | S nat

-- zero
z: nat
z = O

-- one
o: nat
o = S O

-- two
t: nat
t = S (S O)

-- three
r: nat
r = S t

-- four
j: nat
j = S r

--five
k: nat
k = S j

||| returns true if the argument is (represents) zero, otherwise false
iszero: nat -> bool
iszero O = true
iszero _ = false

x: bool
x= nat.iszero r

||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

y: nat
y= nat.succ o

||| returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n

||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n

||| return false if the argument is even otherwise true
oddb: nat -> bool
oddb n = not (evenb n)

{-when evaluating evenb (s r), idris first reduces the command to d, which is "evenb r". this is because in our code we defined evenb of (s (s n)) to be equal to evenb of n. the same logic is equivalent in this case. we had previosuly defined r to be (s t) and t to be (s (so)). idris reads these values as such and keeps on applying reduction until it reaches evenb o, which it then outputs as true.-}

||| given a pair of natural numbers, return its sum
addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m) = S (addp (mkPair n m))

add: nat -> nat -> nat
add O m = m
add (S n) m = S (add n m)

pf: nat -> nat
pf = add (S (S O))

||| given a pair of natural numbers, return its sum
multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = addp (mkPair m (multp (mkPair n m)))

|||given a natural number return its factorial
factp: nat -> nat
factp O = (S O)
factp (S n') = multp (mkPair (S n') (factp n'))

|||given a pair of natural numbers, (n, m),  return the difference between them
subp: pair nat nat -> nat
subp (mkPair O m) = O
subp (mkPair n O) = n
subp (mkPair (S n) (S m)) = subp (mkPair n m)

|||given a pair of natural numbers, (x,n),  return the value of x raised to the nth power
exp: pair nat nat -> nat
exp (mkPair x O) = (S O)
exp (mkPair O n) = O
exp (mkPair x (S n)) = multp (mkPair x (exp (mkPair x n)))

|||given a pair of natural numbers, (a,b), return true if a is  less than or equal to b, otherwise return false
lep: pair nat nat -> bool
lep (mkPair O b) = true
lep (mkPair (S a) O) = false
lep (mkPair (S a) (S b)) = lep(mkPair a b)

|||given a pair of natural numbers, (a,b), return true if a is equal to b, otherwise return false
eqp: pair nat nat -> bool
eqp (mkPair O O) = true
eqp (mkPair a b) = iszero (subp (mkPair (a) (b)))

|||given a pair of natural numbers, (a,b), return true if a is greater than b, otherwise return false
gtp: pair nat nat -> bool
gtp (mkPair a O) = true
gtp (mkPair a b) = not (lep (mkPair (S a) (S b)))

|||given a pair of natural numbers, (a,b), return true if a is greater than or equal to b
gep: pair nat nat -> bool
gep (mkPair a O) = true
gep (mkPair O (S b)) = false
gep (mkPair (S a) (S b)) = gep (mkPair a b)

|||given a pair of natural numbers, (a,b), return true if a is less than b
ltp: pair nat nat -> bool
ltp (mkPair O (S b)) = true
ltp (mkPair a b) = not (gep (mkPair (S a) (S b)))

--fib:  nat -> nat
--fib (O) = O
--fib (S O) = (S O)
--fib (S (S n)) = addp (mkpair (fib (S n)) n)


